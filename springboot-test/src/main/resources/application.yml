# application.properties 애플리케이션 속성 => 관련 속성을 적는곳
# properties 와 yml 같이 있을경우 properties가 먼저 적용된다.

# application 파일 ( 확장자 .properties, .yml 동일 )
# 애플리케이션의 설정 정보를 관리하는 파일인다.

## 파일의 역할 및 용도
# 1. (애플리케이션) 서버 환경 설정 - 서버 포트 번호 등을 관리한다.
# 2. 데이터베이스 설정 - URL, 사용자명, 비밀번호 등을 정의하게 된다.
# 3. JPA 및 Hibernate 설정 - DB 와의 상호작용 시 Entity 매핑 방식과 SQL 출력 여부 등의 설정을 관리한다.
# 위와 같은 역할도 하지만 다른 것도 많다.

# 동작 방식에 대한 설명
# 1. properties 와, yml 이 모두 존재할 경우에 .properties 가 먼저 적용 된다.

## .properties VS .yml
# 1. .properties
# - 주로 설정이 단순하거나 개발 초기 단계에서 많이 사용한다. 개인용으로 많이 사용함
# 2. .yml
# - 설정이 복잡하고 중첩된 구조가 필요할 때 선호한다. 고로 팀에서는 .yml을 많이 쓴다.
# 3. 형식 및 구조 차이
# .properties
# : 키 - 값 쌍의 형태로 설정한다
# spring.jpa.hibernate.ddl-auto=update
# .yml
# 계층적(들여쓰기) 구조를 사용하고 가독성이 좋고 복잡한 설정을 쉽게 관리 가능하다.

# ! 느낌표 주석 불가 #

server:
  port: 8080

# Spring Boot 와 JPA 를 이용해 ORM 을 구현함
# 애플리케이션 설정에서 연결할 DB를 명시한다.

spring:

  datasource:
    url: jdbc:mysql://localhost:3306/test
    username: root
    password: Cksdn1324132$

#  proriles:
#    active:
#      - dev
#      - prod

    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    show-sql: ture

    hibernate:
      ddl-auto: update




